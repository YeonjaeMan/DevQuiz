import '../../model/problem.dart';

List<Problem> djangos = [
  Problem(
    index: 0,
    question: "Django의 주요 특징 중 하나는 무엇인가요?",
    options: ["MTV 패턴", "MVC 패턴", "단일 스레드", "다중 스레드"],
    answer: "MTV 패턴",
    solution: "Django는 Model-Template-View(MTV) 패턴을 사용하여 구조화된 웹 애플리케이션 개발을 지원합니다.",
  ),
  Problem(
    index: 1,
    question: "Django에서 URL 라우팅을 설정하기 위해 사용하는 파일은 무엇인가요?",
    options: ["urls.py", "views.py", "models.py", "settings.py"],
    answer: "urls.py",
    solution: "urls.py 파일은 요청된 URL을 처리할 뷰를 매핑하는 데 사용됩니다.",
  ),
  Problem(
    index: 2,
    question: "Django에서 ORM(Object-Relational Mapping)을 사용하여 데이터베이스와 상호작용하는 클래스는 무엇인가요?",
    options: ["Model", "View", "Template", "Form"],
    answer: "Model",
    solution: "Model 클래스는 데이터베이스 테이블과 매핑되어 데이터베이스와의 상호작용을 담당합니다.",
  ),
  Problem(
    index: 3,
    question: "Django에서 폼 검증을 위해 주로 사용하는 클래스는 무엇인가요?",
    options: ["Form", "ModelForm", "View", "Serializer"],
    answer: "ModelForm",
    solution: "ModelForm 클래스는 모델에 기반한 폼을 쉽게 생성하고 검증할 수 있도록 도와줍니다.",
  ),
  Problem(
    index: 4,
    question: "Django에서 정적 파일을 제공하기 위해 설정해야 하는 항목은 무엇인가요?",
    options: ["STATIC_URL", "MEDIA_URL", "TEMPLATE_DIRS", "INSTALLED_APPS"],
    answer: "STATIC_URL",
    solution: "STATIC_URL 설정은 정적 파일의 URL 경로를 정의합니다.",
  ),
  Problem(
    index: 5,
    question: "Django에서 사용자 인증을 위한 기본 시스템은 무엇인가요?",
    options: ["Django Auth", "Django Security", "Django Login", "Django Register"],
    answer: "Django Auth",
    solution: "Django Auth는 사용자 인증 및 권한 부여를 위한 기본 시스템을 제공합니다.",
  ),
  Problem(
    index: 6,
    question: "Django에서 데이터베이스 마이그레이션을 수행하기 위해 사용하는 명령어는 무엇인가요?",
    options: ["makemigrations", "migrate", "runserver", "createsuperuser"],
    answer: "migrate",
    solution: "migrate 명령어는 데이터베이스에 정의된 모델의 변경사항을 적용합니다.",
  ),
  Problem(
    index: 7,
    question: "Django에서 템플릿 엔진의 기본 파일 확장자는 무엇인가요?",
    options: [".html", ".txt", ".json", ".xml"],
    answer: ".html",
    solution: "Django의 템플릿 파일은 기본적으로 .html 확장자를 사용합니다.",
  ),
  Problem(
    index: 8,
    question: "Django에서 미들웨어의 역할은 무엇인가요?",
    options: ["URL 라우팅", "데이터베이스 연결", "HTTP 요청/응답 처리", "폼 검증"],
    answer: "HTTP 요청/응답 처리",
    solution: "미들웨어는 요청과 응답을 처리하거나 수정하는 데 사용됩니다.",
  ),
  Problem(
    index: 9,
    question: "Django에서 관리 사이트를 사용하기 위해 필요한 설정은 무엇인가요?",
    options: ["INSTALLED_APPS에 'django.contrib.admin' 추가", "STATIC_URL 설정", "DATABASES 설정", "MIDDLEWARE 설정"],
    answer: "INSTALLED_APPS에 'django.contrib.admin' 추가",
    solution: "Django의 관리 사이트를 사용하려면 INSTALLED_APPS에 'django.contrib.admin'을 추가해야 합니다.",
  ),
  Problem(
    index: 10,
    question: "Django에서 CSRF(Cross-Site Request Forgery) 보호를 위한 템플릿 태그는 무엇인가요?",
    options: ["{% csrf_token %}", "{% csrf_protect %}", "{% csrf_enable %}", "{% csrf_block %}"],
    answer: "{% csrf_token %}",
    solution: "Django의 CSRF 보호를 위해 폼 내에 {% csrf_token %} 태그를 추가해야 합니다.",
  ),
  Problem(
    index: 11,
    question: "Django에서 URL 패턴을 정규 표현식으로 정의할 수 있는 방법은 무엇인가요?",
    options: ["path()", "re_path()", "url()", "include()"],
    answer: "re_path()",
    solution: "re_path() 함수를 사용하면 정규 표현식을 사용하여 URL 패턴을 정의할 수 있습니다.",
  ),
  Problem(
    index: 12,
    question: "Django에서 특정 뷰를 템플릿에 연결하기 위해 사용하는 데코레이터는 무엇인가요?",
    options: ["@login_required", "@require_http_methods", "@csrf_exempt", "@api_view"],
    answer: "@login_required",
    solution: "@login_required 데코레이터는 로그인이 필요한 뷰를 정의하는 데 사용됩니다.",
  ),
  Problem(
    index: 13,
    question: "Django에서 모델의 필드를 정의할 때 사용하는 데이터 유형 중 하나는 무엇인가요?",
    options: ["CharField", "TextField", "IntegerField", "모두 포함"],
    answer: "모두 포함",
    solution: "Django 모델에서 CharField, TextField, IntegerField 등 다양한 데이터 유형을 사용할 수 있습니다.",
  ),
  Problem(
    index: 14,
    question: "Django에서 세션 관리를 위한 기본 설정은 무엇인가요?",
    options: ["SESSION_COOKIE_NAME", "SESSION_ENGINE", "SESSION_EXPIRE_AT_BROWSER_CLOSE", "모두 포함"],
    answer: "모두 포함",
    solution: "Django는 SESSION_COOKIE_NAME, SESSION_ENGINE, SESSION_EXPIRE_AT_BROWSER_CLOSE 등 여러 설정을 통해 세션을 관리합니다.",
  ),
  Problem(
    index: 15,
    question: "Django의 기본 ORM 쿼리셋에서 모든 객체를 가져오는 메서드는 무엇인가요?",
    options: ["all()", "get()", "filter()", "exclude()"],
    answer: "all()",
    solution: "all() 메서드는 모델의 모든 객체를 가져오는 데 사용됩니다.",
  ),
  Problem(
    index: 16,
    question: "Django에서 REST API를 구축하기 위해 주로 사용하는 패키지는 무엇인가요?",
    options: ["Django REST framework", "Django API", "Django WebAPI", "Django Restful"],
    answer: "Django REST framework",
    solution: "Django REST framework는 Django에서 RESTful API를 쉽게 구축할 수 있도록 지원하는 패키지입니다.",
  ),
  Problem(
    index: 17,
    question: "Django에서 로그를 기록하기 위한 기본 설정 파일은 무엇인가요?",
    options: ["settings.py", "urls.py", "views.py", "models.py"],
    answer: "settings.py",
    solution: "settings.py 파일에서 Django의 로깅 설정을 정의할 수 있습니다.",
  ),
  Problem(
    index: 18,
    question: "Django에서 비동기 작업을 수행하기 위해 사용하는 패키지는 무엇인가요?",
    options: ["Celery", "Django Channels", "AsyncIO", "모두 포함"],
    answer: "모두 포함",
    solution: "Celery와 Django Channels는 Django에서 비동기 작업을 수행하는 데 사용되는 패키지입니다.",
  ),
  Problem(
    index: 19,
    question: "Django에서 데이터베이스 스키마를 관리하기 위한 명령어는 무엇인가요?",
    options: ["migrate", "syncdb", "makemigrations", "createsuperuser"],
    answer: "makemigrations",
    solution: "makemigrations 명령어는 모델 변경사항에 대한 마이그레이션 파일을 생성하는 데 사용됩니다.",
  ),
];
