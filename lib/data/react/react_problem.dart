import '../../model/problem.dart';

List<Problem> reacts = [
  Problem(
    index: 0,
    question: "React의 주요 특징 중 하나는 무엇인가요?",
    options: ["상태 관리", "DOM 조작", "가상 DOM", "CSS 스타일링"],
    answer: "가상 DOM",
    solution: "React는 가상 DOM을 사용하여 UI 렌더링의 효율성을 높입니다.",
  ),
  Problem(
    index: 1,
    question: "React에서 상태(state)를 변경하는 방법은 무엇인가요?",
    options: ["setState() 메서드", "updateState() 메서드", "changeState() 메서드", "modifyState() 메서드"],
    answer: "setState() 메서드",
    solution: "React 컴포넌트의 상태를 변경할 때는 setState() 메서드를 사용합니다.",
  ),
  Problem(
    index: 2,
    question: "React 컴포넌트의 생명주기를 관리하는 메서드는 무엇인가요?",
    options: ["componentWillMount", "componentDidUpdate", "componentWillUnmount", "이 모두"],
    answer: "이 모두",
    solution: "이 모든 메서드는 React 컴포넌트의 생명주기와 관련된 메서드입니다.",
  ),
  Problem(
    index: 3,
    question: "React에서 props의 용도는 무엇인가요?",
    options: ["컴포넌트의 상태를 관리하기 위해", "컴포넌트 간 데이터 전달", "컴포넌트를 스타일링하기 위해", "DOM 요소를 직접 조작하기 위해"],
    answer: "컴포넌트 간 데이터 전달",
    solution: "Props는 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달하는 데 사용됩니다.",
  ),
  Problem(
    index: 4,
    question: "React Hooks는 무엇을 위한 것인가요?",
    options: ["서버 사이드 렌더링", "함수형 컴포넌트에서 상태와 생명주기 관리", "CSS 스타일링", "라우팅 관리"],
    answer: "함수형 컴포넌트에서 상태와 생명주기 관리",
    solution: "Hooks는 함수형 컴포넌트에서 상태를 관리하고 생명주기 기능을 사용할 수 있게 해줍니다.",
  ),
  Problem(
    index: 5,
    question: "useEffect 훅의 주 용도는 무엇인가요?",
    options: ["상태 업데이트", "부수 효과 수행", "렌더링 최적화", "이벤트 핸들링"],
    answer: "부수 효과 수행",
    solution: "useEffect는 컴포넌트가 렌더링된 후 부수 효과를 수행하는 데 사용됩니다.",
  ),
  Problem(
    index: 6,
    question: "React에서 컴포넌트를 어떻게 정의하나요?",
    options: ["function과 return", "클래스와 render 메서드", "이 둘 다", "HTML 태그"],
    answer: "이 둘 다",
    solution: "React 컴포넌트는 함수형으로 또는 클래스형으로 정의할 수 있습니다.",
  ),
  Problem(
    index: 7,
    question: "React에서 조건부 렌더링을 구현하는 방법은?",
    options: ["if 문 사용", "삼항 연산자 사용", "switch 문 사용", "이 모두"],
    answer: "이 모두",
    solution: "React에서는 다양한 조건부 렌더링 방법을 사용할 수 있습니다.",
  ),
  Problem(
    index: 8,
    question: "React에서 배열을 렌더링할 때 주의해야 할 점은?",
    options: ["key 속성을 사용해야 한다", "순서를 유지해야 한다", "모든 요소가 동일해야 한다", "렌더링 속도가 중요하다"],
    answer: "key 속성을 사용해야 한다",
    solution: "배열의 각 요소에 고유한 key 속성을 부여하여 React가 변경된 요소를 식별할 수 있게 해야 합니다.",
  ),
  Problem(
    index: 9,
    question: "React에서 컴포넌트를 메모이제이션하기 위해 사용하는 훅은?",
    options: ["useMemo", "useCallback", "useReducer", "useRef"],
    answer: "useMemo",
    solution: "useMemo는 값의 메모이제이션을 통해 성능을 최적화하는 데 사용됩니다.",
  ),
  Problem(
    index: 10,
    question: "React에서 'controlled component'란 무엇인가요?",
    options: ["상태를 외부에서 관리하는 컴포넌트", "상태가 컴포넌트 내부에서 관리되는 컴포넌트", "렌더링 최적화된 컴포넌트", "이벤트 핸들러가 없는 컴포넌트"],
    answer: "상태가 컴포넌트 내부에서 관리되는 컴포넌트",
    solution: "Controlled component는 상태가 React에 의해 관리되는 입력 컴포넌트를 의미합니다.",
  ),
  Problem(
    index: 11,
    question: "React에서 컴포넌트를 재사용하기 위해 사용하는 방법은?",
    options: ["상태 관리", "props 전달", "HOC(고차 컴포넌트)", "이 모두"],
    answer: "이 모두",
    solution: "다양한 방법으로 컴포넌트를 재사용할 수 있습니다.",
  ),
  Problem(
    index: 12,
    question: "React의 Context API는 무엇을 위해 사용되나요?",
    options: ["상태 관리", "전역 데이터 공유", "라우팅", "폼 처리"],
    answer: "전역 데이터 공유",
    solution: "Context API는 컴포넌트 트리 전반에 걸쳐 전역적으로 데이터를 공유하는 데 사용됩니다.",
  ),
  Problem(
    index: 13,
    question: "React에서 'props drilling'이란 무엇인가요?",
    options: ["props를 여러 단계의 컴포넌트에 전달하는 것", "props를 직접 수정하는 것", "상태를 props로 변환하는 것", "이벤트를 처리하는 것"],
    answer: "props를 여러 단계의 컴포넌트에 전달하는 것",
    solution: "Props drilling은 데이터를 깊은 자식 컴포넌트로 전달할 때 발생하는 문제입니다.",
  ),
  Problem(
    index: 14,
    question: "React에서 'Fragment'는 무엇을 위한 것인가요?",
    options: ["여러 요소를 그룹화하기 위해", "상태 관리를 위해", "라우팅을 위해", "스타일링을 위해"],
    answer: "여러 요소를 그룹화하기 위해",
    solution: "Fragment는 여러 요소를 그룹화하되 불필요한 DOM 노드를 생성하지 않기 위해 사용됩니다.",
  ),
  Problem(
    index: 15,
    question: "React에서 'useReducer' 훅은 어떤 경우에 사용하나요?",
    options: ["단순한 상태 관리", "복잡한 상태 관리", "DOM 조작", "스타일링"],
    answer: "복잡한 상태 관리",
    solution: "useReducer는 복잡한 상태 관리를 위해 상태 업데이트 로직을 중앙 집중식으로 관리합니다.",
  ),
  Problem(
    index: 16,
    question: "React에서 'event delegation'이란 무엇인가요?",
    options: ["이벤트 처리기를 부모 요소에 등록하는 것", "이벤트를 무시하는 것", "이벤트를 직접 등록하는 것", "이벤트를 여러 번 발생시키는 것"],
    answer: "이벤트 처리기를 부모 요소에 등록하는 것",
    solution: "이벤트 위임은 성능 최적화를 위해 부모 요소에 이벤트 처리기를 등록하는 기법입니다.",
  ),
  Problem(
    index: 17,
    question: "React에서 'useRef' 훅의 주 용도는 무엇인가요?",
    options: ["상태 관리", "DOM 요소에 직접 접근", "부수 효과 수행", "데이터 전송"],
    answer: "DOM 요소에 직접 접근",
    solution: "useRef는 DOM 요소를 직접 접근하기 위해 사용됩니다.",
  ),
  Problem(
    index: 18,
    question: "React에서 'memoization'이란 무엇인가요?",
    options: ["중복 렌더링 방지", "상태 업데이트", "이벤트 핸들링", "스타일링"],
    answer: "중복 렌더링 방지",
    solution: "Memoization은 계산된 값을 저장하여 다음 렌더링 시 불필요한 계산을 방지하는 기법입니다.",
  ),
  Problem(
    index: 19,
    question: "React의 'React Router'는 무엇을 위한 것인가요?",
    options: ["라우팅 관리", "상태 관리", "스타일링", "API 호출"],
    answer: "라우팅 관리",
    solution: "React Router는 React 애플리케이션에서 라우팅을 관리하고, 페이지 간의 네비게이션을 쉽게 구현할 수 있게 도와주는 라이브러리입니다.",
  ),
];